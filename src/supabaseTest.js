// This file is for testing the Supabase connection
import { supabase } from './supabase'

// Function to test the connection
async function testSupabaseConnection() {
  console.log('Testing Supabase connection...')
  
  try {
    // Test basic connectivity using a simpler and more reliable method
    const { error } = await supabase.from('suggestions').select('count', { head: true })
    
    if (error) {
      console.error('Connection test failed:', error)
      
      // Provide detailed console logging for debugging
      console.error('Error code:', error.code)
      console.error('Error message:', error.message)
      console.error('Error details:', error.details)
      
      // Check if it's a CORS error
      if (error.message.includes('fetch') || error.code === 'ETIMEDOUT' || error.code === 'ECONNREFUSED') {
        return { 
          success: false, 
          error: 'Cannot connect to Supabase: CORS error. Add your domain to the CORS allowed origins in Supabase project settings (Project Settings → API → CORS configuration).'
        }
      }
      
      // Check if it's a table error
      if (error.code === '42P01') {
        return { 
          success: false, 
          error: 'Table "suggestions" does not exist. Create it in Supabase SQL Editor with: CREATE TABLE suggestions (id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, name TEXT, suggestion TEXT, important BOOLEAN, created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW());'
        }
      }
      
      // Check if it's an auth error
      if (error.code === '401' || (error.message && error.message.includes('auth'))) {
        return {
          success: false,
          error: 'Authentication error when connecting to Supabase. Check your API key in supabase.js file.'
        }
      }
      
      return { success: false, error: 'Supabase error: ' + error.message }
    }
    
    console.log('Connection successful!')
    return { success: true }
  } catch (error) {
    console.error('Connection test error:', error)
    
    // More specific error messages based on error type
    if (error instanceof TypeError && error.message.includes('fetch')) {
      return { 
        success: false, 
        error: 'Cannot connect to Supabase: TYPEERROR: FAILED TO FETCH. Enable CORS in Supabase Project Settings.'
      }
    }
    
    return { 
      success: false, 
      error: 'Unexpected error: ' + (error.message || 'Unknown error') 
    }
  }
}

// Export the test function
export { testSupabaseConnection } 